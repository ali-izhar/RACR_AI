# alexnet_split.yaml
# This configuration file defines a split inference setup for AlexNet model

# Define the types of participants in the experiment
participant_types:
  # Client configuration
  client:
    service:
      module: basic_split_inference  # Module for client-side operations
      class: ClientService           # Class implementing client service
    model:
      model_name: alexnet            # Using AlexNet model
      device: cpu                    # Run on CPU
      mode: eval                     # Model in evaluation mode
      depth: np.inf                  # Infinite depth for model splitting
      input_size: [3, 224, 224]      # Input dimensions (channels, height, width)
      class: default                 # Default model class

  # Edge server configuration
  edge:
    service:
      module: basic_split_inference  # Module for edge-side operations
      class: EdgeService             # Class implementing edge service
    model:
      module: default                # Default module for edge model
      class: default                 # Default class for edge model

# Map participant types to specific devices and assign unique names
participant_instances:
  - device: localhost                # Client runs on local machine
    node_type: client
    instance_name: CLIENT1           # Unique name for this client instance
  - device: racr                     # Edge server runs on a device named 'racr'
    node_type: edge
    instance_name: EDGE1             # Unique name for this edge instance

# Define initial tasks for each participant to start the experiment
playbook:
  CLIENT1:                           # Tasks for CLIENT1
    - task_type: infer_dataset       # Perform inference on a dataset
      params:
        dataset_module: imagenet     # Using ImageNet dataset module
        dataset_instance: imagenet10_tr  # Specific ImageNet subset (likely 10 classes)
    - task_type: finish_signal       # Signal completion of tasks

  EDGE1:                             # Tasks for EDGE1
    - task_type: wait_for_tasks      # Wait for tasks from clients